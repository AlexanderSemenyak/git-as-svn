import org.ajoberstar.grgit.Grgit

project.version = "1.0.17"

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://bozaro.github.io/gradle-ospackage-plugin/repository"
    }
    maven {
      url "https://repo.spring.io/plugins-release"
    }
  }

  dependencies {
    classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0"
    classpath "org.ajoberstar:gradle-git:0.9.0"
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.7.1"
    classpath "com.netflix.nebula:gradle-ospackage-plugin:3.1.0-dev.17+postinst.ac6901a"
    classpath "io.spring.gradle:docbook-reference-plugin:0.3.1"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.7"
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  version = rootProject.version
}

apply plugin: "license"
apply plugin: "idea"
apply plugin: "java"
apply plugin: "application"
apply plugin: "project-report"
apply plugin: "com.google.protobuf"
apply plugin: "nebula.deb"

license {
  header rootProject.file('license_header.txt')
  exclude "src/test/resources/svnserver"
}

dependencies {
  compile "org.jetbrains:annotations:13.0"
  compile "org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r"
  compile "org.tmatesoft.svnkit:svnkit:1.8.11"
  compile "org.yaml:snakeyaml:1.14"
  compile "com.beust:jcommander:1.35"
  compile "org.ini4j:ini4j:0.5.2"
  compile "org.atteo.classindex:classindex:3.1"
  compile "org.mapdb:mapdb:1.0.6"
  compile "com.unboundid:unboundid-ldapsdk:3.0.0"
  compile "org.eclipse.jetty:jetty-server:9.3.0.v20150612"
  compile "org.eclipse.jetty:jetty-servlet:9.3.0.v20150612"
  compile "org.gitlab:java-gitlab-api:1.1.9"
  compile "com.esotericsoftware:kryo:3.0.3"
  compile "org.bitbucket.b_c:jose4j:0.4.4"
  compile "com.google.guava:guava:18.0"
  compile "com.google.protobuf:protobuf-java:2.6.1"
  compile "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"

  compile "ru.bozaro.gitlfs:gitlfs-pointer:0.7.0"
  compile "ru.bozaro.gitlfs:gitlfs-client:0.7.0"
  compile "ru.bozaro.gitlfs:gitlfs-server:0.7.0"

  compile "org.slf4j:slf4j-api:1.7.12"
  runtime "org.apache.logging.log4j:log4j-core:2.4.1"
  runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.4.1"

  testCompile("org.apache.directory.server:apacheds-protocol-ldap:2.0.0-M19") {
    exclude group: "org.slf4j", module: "slf4j-log4j12"
  }
  testCompile "org.apache.directory.api:api-ldap-codec-standalone:1.0.0-M26"
  testCompile "org.testng:testng:6.8.8"
}

sourceCompatibility = JavaVersion.VERSION_1_8
mainClassName = "svnserver.server.Main"
applicationDefaultJvmArgs = ["-Xmx512m"]

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility.name
  }
  module {
    jdkName = sourceCompatibility.name
    downloadJavadoc = true
    downloadSources = true

    sourceDirs += file("src/generated/main/java")
    testSourceDirs += file("src/generated/test/java")
    generatedSourceDirs += file("src/generated/main/java")
    generatedSourceDirs += file("src/generated/test/java")
  }
}

run {
  args "-c"
  args "${projectDir}/cfg/config-local.example"
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useTestNG()
  maxHeapSize = "384m"
  ignoreFailures = "$testIgnoreFailures".toBoolean()

  // listen to events in the test execution lifecycle
  beforeTest { descriptor ->
    logger.lifecycle("Running test: " + descriptor)
  }
}

jar {
  archiveName "${project.name}.jar"
  manifest {
    attributes(
        "Main-Class": "svnserver.server.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

protobuf {
  protoc {
    artifact = 'com.google.protobuf:protoc:2.6.1'
  }
  generatedFilesBaseDir = "$projectDir/src/generated"
}

task createDocs(type: Copy) {
  from("$projectDir/cfg") {
    include "*.example"
  }
  from("$projectDir") {
    include "*.md"
    include "LICENSE"
  }
  into file("$buildDir/doc")
}

distributions {
  main {
    contents {
      from(createDocs) {
        into "doc"
      }
    }
  }
}

processResources {
  from(sourceSets.main.resources.srcDirs) {
    include "**/VersionInfo.properties"
    expand([
        "version" : project.version,
        "revision": Grgit.open(project.file(rootProject.projectDir)).head().id,
        "tag"     : (System.getenv("TRAVIS_TAG") ?: ""),
    ])
  }
}

task startScriptsDeb(type: CreateStartScripts) {
  outputDir = file('build/sample')
  classpath = startScripts.classpath
  mainClassName = startScripts.mainClassName
  applicationName = startScripts.applicationName
  defaultJvmOpts = project.applicationDefaultJvmArgs
  optsEnvironmentVar
}

task distDeb(type: Deb, dependsOn: startScriptsDeb) {
  license "GPL-2+"

  requires("adduser")
  requires("java8-runtime-headless")

  customField([
      "Commit-ID": Grgit.open(project.file(rootProject.projectDir)).head().id
  ])

  configurationFile("/etc/default/git-as-svn")
  configurationFile("/etc/git-as-svn/git-as-svn.conf")

  preInstall file("src/main/debian/DEBIAN/preinst.sh")
  postInstall file("src/main/debian/DEBIAN/postinst.sh")
  preUninstall file("src/main/debian/DEBIAN/prerm.sh")
  postUninstall file("src/main/debian/DEBIAN/postrm.sh")

  from("src/main/debian") {
    exclude "**/.keep"
    exclude "DEBIAN"
    exclude "var/cache/git-as-svn"
    exclude "var/git"
    exclude "var/log/git-as-svn"
    into "/"
  }

  from("${project.buildDir}/scripts") {
    into "/usr/share/git-as-svn/bin"
  }

  from("src/main/debian/var/cache/git-as-svn") {
    exclude "**/.keep"
    createDirectoryEntry = true
    user "git"
    into "var/cache/git-as-svn"
  }

  from("src/main/debian/var/log/git-as-svn") {
    exclude "**/.keep"
    createDirectoryEntry = true
    user "git"
    into "var/log/git-as-svn"
  }

  from("config.example") {
    rename ".*", "git-as-svn.conf.example"
    into "etc/git-as-svn"
  }

  from("src/main/debian/var") {
    exclude "**/.keep"
    createDirectoryEntry = true
    user "git"
    into "var"
  }

  from(configurations.archives.artifacts*.file + configurations.runtime.files) {
    into "usr/share/git-as-svn/lib"
  }

  from(createDocs) {
    into "usr/share/doc/git-as-svn"
  }
}

assembleDist.dependsOn(distDeb)

distZip {
  archiveName "${project.name}_${project.version}.zip"
}

distTar {
  archiveName "${project.name}_${project.version}.tar"
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { it.name }
  return vendorJars.join(" ")
}

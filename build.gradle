task wrapper(type: Wrapper) {
  gradleVersion = "2.0"
}

repositories {
  mavenCentral()
}

apply plugin: "idea"
apply plugin: "java"
apply plugin: "project-report"

dependencies {
  compile "org.jetbrains:annotations:13.0"
  compile "org.eclipse.jgit:org.eclipse.jgit:3.4.0.201406110918-r"
  compile "org.tmatesoft.svnkit:svnkit:1.8.5"
  compile "org.yaml:snakeyaml:1.13"
  compile "org.slf4j:slf4j-simple:1.7.7"
  compile "com.beust:jcommander:1.35"
  compile "commons-io:commons-io:2.4"
  compile "org.ini4j:ini4j:0.5.2"
  testCompile "org.testng:testng:6.8.8"
}

sourceCompatibility = JavaVersion.VERSION_1_8

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility.name
  }
  module {
    jdkName = sourceCompatibility.name
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useTestNG()
}

jar {
  manifest {
    attributes(
        "Main-Class": "svnserver.server.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

task deployJars(dependsOn: jar) << {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  copy {
    from fullArtifacts.intersect(projectArtifacts)
    from "config.example"
    into "${project.buildDir}/deploy"
  }
  copy {
    from fullArtifacts.minus(projectArtifacts)
    into "${project.buildDir}/deploy/vendors"
  }
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { "vendors/${it.name}" }
  return vendorJars.join(" ")
}

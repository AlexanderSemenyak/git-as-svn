import org.ajoberstar.grgit.Grgit

project.version = "1.0.13"

buildscript {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
  }

  dependencies {
    classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.10.0"
    classpath "org.ajoberstar:gradle-git:0.9.0"
    classpath "com.netflix.nebula:gradle-ospackage-plugin:3.1.0"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.7"
}

repositories {
  mavenLocal()
  mavenCentral()
}

apply plugin: "license"
apply plugin: "idea"
apply plugin: "java"
apply plugin: "project-report"
apply plugin: "nebula.deb"

license {
  header rootProject.file('license_header.txt')
  exclude "src/test/resources/svnserver"
}

dependencies {
  compile "org.jetbrains:annotations:13.0"
  compile "org.eclipse.jgit:org.eclipse.jgit:3.6.2.201501210735-r"
  compile "org.tmatesoft.svnkit:svnkit:1.8.11"
  compile "org.yaml:snakeyaml:1.14"
  compile "org.slf4j:slf4j-simple:1.7.7"
  compile "com.beust:jcommander:1.35"
  compile "org.ini4j:ini4j:0.5.2"
  compile "org.atteo.classindex:classindex:3.1"
  compile "org.mapdb:mapdb:1.0.6"
  compile "com.unboundid:unboundid-ldapsdk:3.0.0"
  compile "org.eclipse.jetty:jetty-server:9.3.0.v20150612"
  compile "org.eclipse.jetty:jetty-servlet:9.3.0.v20150612"
  compile "org.gitlab:java-gitlab-api:1.1.9"
  compile "com.esotericsoftware:kryo:3.0.3"
  compile "org.bitbucket.b_c:jose4j:0.4.4"
  compile "com.google.guava:guava:18.0"

  compile "ru.bozaro.gitlfs:gitlfs-pointer:0.3.0"
  compile "ru.bozaro.gitlfs:gitlfs-client:0.3.0"

  compile "org.glassfish.jersey.containers:jersey-container-servlet:2.21"
  compile "org.glassfish.jersey.containers:jersey-container-simple-http:2.21"
  compile "org.glassfish.jersey.containers:jersey-container-simple-http:2.21"
  compile "org.glassfish.jersey.media:jersey-media-json-jackson:2.21"

  testCompile "org.apache.directory.server:apacheds-protocol-ldap:2.0.0-M19"
  testCompile "org.apache.directory.api:api-ldap-codec-standalone:1.0.0-M26"
  testCompile "org.testng:testng:6.8.8"
}

sourceCompatibility = JavaVersion.VERSION_1_8

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility.name
  }
  module {
    jdkName = sourceCompatibility.name
    downloadJavadoc = true
    downloadSources = true
  }
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

test {
  useTestNG()
  maxHeapSize = "384m"
  ignoreFailures = "$testIgnoreFailures".toBoolean()
}

jar {
  archiveName "${project.name}.jar"
  manifest {
    attributes(
        "Main-Class": "svnserver.server.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

processResources {
  expand([
      "revision": Grgit.open(project.file(rootProject.projectDir)).head().id,
      "tag"     : (System.getenv("TRAVIS_TAG") ?: ""),
  ])
}

task deployJars(dependsOn: jar) << {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  copy {
    from fullArtifacts.intersect(projectArtifacts)
    from(project.projectDir) {
      include "*.example"
      include "*.md"
      include "LICENSE"
    }
    into "${project.buildDir}/deploy"
  }
  copy {
    from fullArtifacts.minus(projectArtifacts)
    into "${project.buildDir}/deploy/vendors"
  }
}

task deployDeb(type: Deb, dependsOn: deployJars) {
  license "GPL-2+"

  requires("java8-runtime-headless")

  customField([
      "Commit-ID": Grgit.open(project.file(rootProject.projectDir)).head().id
  ])

  from("build/deploy") {
    include "**/*.jar"
    into "/usr/share/git-as-svn"
  }

  from(rootProject.projectDir) {
    include "*.md"
    include "*.example"
    include "LICENSE"
    into "/usr/share/doc/git-as-svn"
  }
}

task deployZip(type: Zip, dependsOn: deployJars) {
  from "build/deploy"
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { "vendors/${it.name}" }
  return vendorJars.join(" ")
}

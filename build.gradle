import org.ajoberstar.grgit.Grgit

project.version = "1.2.0"

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://repo.spring.io/plugins-release"
    }
    jcenter()
  }

  dependencies {
    classpath "nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0"
    classpath "org.ajoberstar:gradle-git:1.7.2"
    classpath "com.google.protobuf:protobuf-gradle-plugin:0.8.3"
    classpath "io.spring.gradle:docbook-reference-plugin:0.3.1"
    classpath "com.github.ben-manes:gradle-versions-plugin:0.17.0"
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = "2.11"
}

allprojects {
  repositories {
    mavenLocal()
    mavenCentral()
  }
}

subprojects {
  version = rootProject.version
}

apply plugin: "application"

allprojects {
  apply plugin: "license"
  apply plugin: "project-report"

  license {
    header rootProject.file('license_header.txt')
    exclude "**/*.json"
  }
}

configure(allprojects.findAll { !it.path.startsWith(":docbook") }) {
  apply plugin: "idea"
  apply plugin: "java"
  apply plugin: "com.github.ben-manes.versions"
  apply plugin: "com.google.protobuf"

  idea {
    module {
      jdkName = sourceCompatibility.name
      downloadJavadoc = true
      downloadSources = true

      // Workaround for https://youtrack.jetbrains.com/issue/IDEA-175172
      outputDir file('build/classes/main')
      testOutputDir file('build/classes/test')

      sourceDirs += file("src/generated/main/java")
      testSourceDirs += file("src/generated/test/java")
      generatedSourceDirs += file("src/generated/main/java")
      generatedSourceDirs += file("src/generated/test/java")
    }
  }

  dependencies {
    compile "org.jetbrains:annotations:15.0"
    compile "org.atteo.classindex:classindex:3.4"
    compile "org.slf4j:slf4j-api:1.7.25"

    testCompile "org.testng:testng:6.13.1"
  }

  protobuf {
    protoc {
      artifact = "com.google.protobuf:protoc:3.5.0"
    }
    generatedFilesBaseDir = "$projectDir/src/generated"
  }

  test {
    useTestNG()
    maxHeapSize = "384m"
    ignoreFailures = "$testIgnoreFailures".toBoolean()

    testLogging {
      exceptionFormat = 'full'
    }

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
      logger.lifecycle("Running test: " + descriptor)
    }
  }
}

dependencies {
  compile project(":protobuf")

  compile "org.eclipse.jgit:org.eclipse.jgit:4.9.2.201712150930-r"
  compile "org.tmatesoft.svnkit:svnkit:1.9.0"
  compile "org.yaml:snakeyaml:1.19"
  compile "com.beust:jcommander:1.72"
  compile "org.ini4j:ini4j:0.5.4"
  compile "org.mapdb:mapdb:3.0.5"
  compile "com.unboundid:unboundid-ldapsdk:4.0.3"
  compile "org.eclipse.jetty:jetty-server:9.4.8.v20171121"
  compile "org.eclipse.jetty:jetty-servlet:9.4.8.v20171121"
  compile "org.gitlab:java-gitlab-api:4.0.0"
  compile "com.esotericsoftware:kryo:4.0.1"
  compile "org.bitbucket.b_c:jose4j:0.6.2"
  compile "com.google.guava:guava:23.5-jre"
  compile "com.kohlschutter.junixsocket:junixsocket-native-common:2.0.4"

  compile "ru.bozaro.gitlfs:gitlfs-pointer:0.11.1"
  compile "ru.bozaro.gitlfs:gitlfs-client:0.11.1"
  compile "ru.bozaro.gitlfs:gitlfs-server:0.11.1"
  compile "com.google.oauth-client:google-oauth-client:1.23.0"
  compile "com.google.http-client:google-http-client-jackson2:1.23.0"

  runtime "org.apache.logging.log4j:log4j-core:2.10.0"
  runtime "org.apache.logging.log4j:log4j-slf4j-impl:2.10.0"

  testCompile("org.testcontainers:testcontainers:1.5.1")
}

sourceCompatibility = JavaVersion.VERSION_1_8
mainClassName = "svnserver.server.Main"
applicationDefaultJvmArgs = ["-Xmx512m"]

idea {
  project {
    jdkName = sourceCompatibility.name
    languageLevel = sourceCompatibility
  }
}

run {
  args "-c"
  args "${projectDir}/cfg/config-local.example"
  args "--unsafe"
}

tasks.withType(JavaCompile) {
  options.encoding = "UTF-8"
}

jar {
  archiveName "${project.name}.jar"
  manifest {
    attributes(
        "Main-Class": "svnserver.server.Main",
        "Class-Path": "${-> createLauncherClassPath()}"
    )
  }
}

task createDocs(type: Copy) {
  from("$projectDir/cfg") {
    include "*.example"
  }
  from("$projectDir") {
    include "*.md"
    include "LICENSE"
  }
  into file("$buildDir/doc")
}

distributions {
  main {
    contents {
      from(createDocs) {
        into "doc"
      }
    }
  }
}

processResources {
  from(sourceSets.main.resources.srcDirs) {
    include "**/VersionInfo.properties"
    expand([
        "version" : project.version,
        "revision": Grgit.open(project.file(rootProject.projectDir)).head().id,
        "tag"     : (System.getenv("TRAVIS_TAG") ?: ""),
    ])
  }
}

task debianControl(type: Copy) {
  from("$projectDir/src/main/deb") {
    exclude "**/changelog"
  }
  from("$projectDir/src/main/deb") {
    include "**/changelog"
    expand([
        "version" : project.version,
        "date":     new java.text.SimpleDateFormat("EEE, d MMM yyyy HH:mm:ss Z", Locale.US).format(Grgit.open(project.file(rootProject.projectDir)).head().date),
    ])
  }
  into file("$buildDir/debPackage/package")
}

task distDeb(type: Exec, dependsOn: [installDist, debianControl]) {
  workingDir "$buildDir/debPackage/package"
  executable "dpkg-buildpackage"
  args "-uc", "-us"
}

task assembleDeb(type: Copy, dependsOn: distDeb) {
  from("$buildDir/debPackage") {
    include "*.deb"
  }
  into "$buildDir/distributions"
}

assembleDist.dependsOn(assembleDeb)

distZip {
  archiveName "${project.name}_${project.version}.zip"
}

distTar {
  archiveName "${project.name}_${project.version}.tbz2"
  compression = Compression.BZIP2
}

def createLauncherClassPath() {
  def projectArtifacts = configurations.archives.artifacts*.file
  def fullArtifacts = configurations.archives.artifacts*.file + configurations.runtime.files
  def vendorJars = fullArtifacts.minus(projectArtifacts).collect { it.name }
  return vendorJars.join(" ")
}

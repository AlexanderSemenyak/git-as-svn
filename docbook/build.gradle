subprojects {
  apply plugin: "docbook-reference"

  def docbookDir = "${project.buildDir}/docbook"
  def inputDir = "${project.parent.projectDir}/src/main/reference"

  task translate(type: Copy) {
    from (inputDir) {
      exclude "**/*.xml"
    }
    into docbookDir
  }

  fileTree(inputDir) {
    include "**/*.xml"
  }.visit {FileVisitDetails details ->
    if (details.directory) return;
    translate.dependsOn.add(tasks.create (name: "translate." + details.relativePath, type: Exec) {
      def output = file("$docbookDir/${details.relativePath}")
      output.parentFile.mkdirs()

      inputs.file file(details.file)
      inputs.file file(getPo(project))
      outputs.file output

      executable "xml2po"
      args "-p", getPo(project)
      args details.file.path
      doFirst {
        standardOutput = new FileOutputStream(output)
      }
    })
  }

  reference {
    sourceDir = project.file(docbookDir)
    fopUserConfig = file("../fop-userconfig.xml")
  }

  afterEvaluate {
    tasks.findAll { it.name.startsWith("reference") }.each{ it.dependsOn.add("translate") }
  }
}

def getPo(project) {
  return "${project.parent.projectDir}/src/main/po/${project.name}.po"
}

#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
import os
import os.path
import socket
import re
import json
import sys


def fail(code, message):
    sys.stderr.write("ERROR: " + message + "\n")
    os._exit(code)


def parseResponse(response):
    separator = response.index(b"\r\n\r\n")
    header = response[0:separator].split(b"\r\n")
    body = response[separator + 4:]

    m = re.compile(r"^(\S+)\s+(\S+)\s+(.+)$").match(header[0].decode("utf-8"))
    protocol = m.group(1)
    code = int(m.group(2))
    reason = m.group(3)

    headers = {}
    for item in header[1:]:
        separator = item.index(b':')
        headers[item[0:separator].decode("utf-8").strip()] = item[separator + 1:].decode("utf-8").strip()

    return {
        "protocol": protocol,
        "code": code,
        "reason": reason,
        "header": headers,
        "body": body,
    }


parser = argparse.ArgumentParser()
parser.add_argument("repository", help="SSH repository path")
parser.add_argument("operation", help="Git LFS operation (upload or download)")
parser.add_argument("oid", help="OID (can be send by Git LFS v0.5.x clients)", nargs="?")
args = parser.parse_args()

config = {
    "socket": "../cfg/git-as-svn.socket"
}

if not os.path.exists(config["socket"]):
    fail(1, "API socket file not exists")

client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
client.connect(config["socket"])
client.send("""GET /{repository}/lfs/authenticate.json?mode={mode}&identificator={identificator} HTTP/1.0
Host: localhost

""".format(
        repository=args.repository,
        mode="anonymous",
        identificator="test",
).replace("\r", "").replace("\n", "\r\n").encode("utf-8"))
client.shutdown(socket.SHUT_WR)

response = b""
while True:
    block = client.recv(1024)
    if len(block) == 0: break
    response += block
client.close()

response = parseResponse(response)
if response["code"] != 200:
    fail(2, "API response error: {code} {reason}".format(**response))

bodyParsed = json.loads(response["body"].decode("utf-8"))
error = bodyParsed.get("error", None)
if error is not None:
    fail(3, "API response error: %s" % (error))

print (bodyParsed["success"]["json"])
